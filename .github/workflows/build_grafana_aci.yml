# This is a quick start GitHub Actions workflow for Grafana that runs 
# on Azure Container Instances and uses Azure MySQL Databases services
# to provide a serverless sandbox. For additional details check README.md.
#
# Original Source: https://github.com/jabrownlee/
#
# NOTE: YOU NEED TO SETUP 2 SECRETS IN YOUR GITHUB REPO!!!
# 1st ---
#  This creates a new App Registration and grants it the Contributor role to your subscription.
#
#    az ad sp create-for-rbac --name "GitHubDeploymentAcct" --role contributor --sdk-auth
#  
# The JSON output needs to be cut/pasted into a Secret in your repo called AZURE_CREDENTIALS. 
# 
# 2nd ---
#  Set a password that will be used for the MySQL admin credentials.
#  Create the secret named MYSQLADMIN_PASSWORD.
#
name: Build Grafana in Azure 

# Triggers the workflow on a manual trigger.
on:
  workflow_dispatch:
    # Inputs the workflow accepts. These are required and will set environnement vars.
    inputs:
      resource_grp:
        description: 'Name for the new Azure resource group you want created.'
        default: '000_AAA_APACHECO_GRF_AND_INFLUXDB'
        required: true
      loc:
        description: "The Azure region you want to use. For list run -> az account list-locations"
        default: "eastus"
        required: true
      con_name:
        description: "Name for the Azure Container Instance that will host Grafana."
        default: "nslabsgrafana"
        required: true
      con_dns_name:
        description: "URL host name that will be added to the FQDN assigned by Azure. Please modify with a unique value -> this must be a globally unique value."
        default: "nslabsgrafana"
        required: true
      con_image:
        default: "grafana/grafana"
        description: 'Grafana Docker image to pull. Default is the latest.'
        required: true
      db_server_name:
        default: "nslabs-grafanasql"
        description: 'Name for the MySQL DB host to create. Please modify with a unique value -> this must be a globally unique value.'
        required: true
      db_admin_name:
        default: "sqladmin"
        description: 'UserID that will be created on the MySQL DB host for admin.'
        required: true
      db_name:
        default: "grafana"
        description: 'Database that will be created to hold the Grafana config. Suggested to take the default.'
        required: true
# Set environment vars using the values provided as inputs to the workflow. 
env:
  resource_grp: "${{ github.event.inputs.resource_grp }}"
  loc: "${{ github.event.inputs.loc }}"
  con_name: "${{ github.event.inputs.con_name }}"
  con_dns_name: "${{ github.event.inputs.con_dns_name }}"
  con_image: "${{ github.event.inputs.con_image }}"
  db_server_name: "${{ github.event.inputs.db_server_name }}"
  db_admin_name: "${{ github.event.inputs.db_admin_name }}"
  db_name: "${{ github.event.inputs.db_name }}"
  db_server_fqdn: "" #This will be set later after the DB host is created

jobs:
  Create_Resource_Group:
    runs-on: ubuntu-latest
    steps:
    - name: Validate echo environment vars into log for diag 
      run: env 
    - uses: azure/login@v1.1
      # You need to set the AZURE_CREDENTIALS secret as noted above. 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Validate Azure Connection 
      run: az account show
    - name: Create Resource Group 
      run: az group create --name $resource_grp --location $loc
  Build_DB:
    runs-on: ubuntu-latest
    needs: Create_Resource_Group
    steps:
    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Validate Azure Connection 
      run: az account show
    - name: Provision MySQL service
      # Please create a new secret in your GitHub repo called MYSQLADMIN_PASSWORD and assign a password string
      run: |
        # Single Server Deprecated.  
        # az extension add --name db-up --allow-preview true
        # az mysql up --resource-group $resource_grp --location $loc --server-name $db_server_name --sku-name B_Gen5_1 --backup-retention 7 --storage-size 5120 --admin-user $db_admin_name --admin-password ${{ secrets.MYSQLADMIN_PASSWORD }}
        az mysql flexible-server create --resource-group $resource_grp --name $db_server_name -l $loc --admin-user $db_admin_name --admin-password ${{ secrets.MYSQLADMIN_PASSWORD }}
        db_server_fqdn="$(az mysql flexible-server show --resource-group $resource_grp --name $db_server_name --query "fullyQualifiedDomainName" --output tsv)"
    - name: Create Grafana DB
      run: |
        db_server_fqdn=$(az mysql server show --resource-group $resource_grp --name $db_server_name --query "fullyQualifiedDomainName" --output tsv)
        mysql -h $db_server_fqdn -u $db_admin_name@$db_server_name --password=${{ secrets.MYSQLADMIN_PASSWORD }} -e "CREATE DATABASE $db_name;"
        mysql -h $db_server_fqdn -u $db_admin_name@$db_server_name --password=${{ secrets.MYSQLADMIN_PASSWORD }} -e "SHOW DATABASES;"
# ----
# ----
  Build_Container:
    runs-on: ubuntu-latest
    needs: Build_DB
    steps:
    - uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Validate Azure Connection 
      run: az account show
    - name: Create Container 
      run: |
        db_server_fqdn=$(az mysql server show --resource-group $resource_grp --name $db_server_name --query "fullyQualifiedDomainName" --output tsv)
        az container create --resource-group $resource_grp --name $con_name --image $con_image --os-type Linux --location $loc --restart-policy Always --ip-address Public --ports 3000 --dns-name-label $con_dns_name --environment-variables "GF_DATABASE_TYPE=mysql" "GF_DATABASE_HOST=$db_server_fqdn:3306" "GF_DATABASE_SSL_MODE=true" "GF_DATABASE_CA_CERT_PATH=/etc/ssl/certs/ca-cert-Baltimore_CyberTrust_Root.pem" "GF_DATABASE_SERVER_CERT_NAME=*.mysql.database.azure.com" --secure-environment-variables "GF_DATABASE_USER=$db_admin_name@$db_server_name" "GF_DATABASE_PASSWORD=${{ secrets.MYSQLADMIN_PASSWORD }}"
    - name: Wait 3 min for Grafana DB Init to Run
      uses: jakejarvis/wait-action@master
      with:
        time: '3m'
    - name: Create Self Signed SSL Cert for Container
      run: |
        db_server_fqdn=$(az mysql server show --resource-group $resource_grp --name $db_server_name --query "fullyQualifiedDomainName" --output tsv)
        con_fqdn=$(az container show --resource-group $resource_grp --name $con_name --query "ipAddress.fqdn" --output tsv)
        openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out selfsigncert.crt -subj "/C=US/ST=TN/L=Nash/O=Super Sandbox/OU=Boxes/CN=$con_fqdn"
        openssl x509 -text -noout -in selfsigncert.crt
        openssl pkcs12 -export -out selfsigncert.pfx -inkey privateKey.key -in selfsigncert.crt -password pass:${{ secrets.MYSQLADMIN_PASSWORD }}
        openssl pkcs12 -in selfsigncert.pfx -noout -info -password pass:${{ secrets.MYSQLADMIN_PASSWORD }}
        scert_crt=$(<selfsigncert.crt)
        priv_key=$(<privateKey.key)
        az container create --resource-group $resource_grp --name $con_name --image $con_image --os-type Linux --location $loc --restart-policy Always --ip-address Public --ports 3000 --dns-name-label $con_dns_name --environment-variables "GF_DATABASE_TYPE=mysql" "GF_DATABASE_HOST=$db_server_fqdn:3306" "GF_DATABASE_SSL_MODE=true" "GF_DATABASE_CA_CERT_PATH=/etc/ssl/certs/ca-cert-Baltimore_CyberTrust_Root.pem" "GF_DATABASE_SERVER_CERT_NAME=*.mysql.database.azure.com" "GF_SERVER_PROTOCOL=https" "GF_SERVER_CERT_FILE=/mnt/secrets/selfsigncert.crt" "GF_SERVER_CERT_KEY=/mnt/secrets/privateKey.key" "GF_SERVER_ROOT_URL=https://$con_fqdn:3000" "GF_SECURITY_COOKIE_SECURE=true" "GF_SECURITY_STRICT_TRANSPORT_SECURITY=true" --secure-environment-variables "GF_DATABASE_USER=$db_admin_name@$db_server_name" "GF_DATABASE_PASSWORD=${{ secrets.MYSQLADMIN_PASSWORD }}" --secrets-mount-path "/mnt/secrets" --secrets "selfsigncert.crt=$scert_crt" "privateKey.key=$priv_key"

